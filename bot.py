import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from dotenv import load_dotenv
import os
from database import init_db, get_connection, is_admin, add_admin, add_premium_user, remove_premium_user, get_premium_users, is_premium_user
from premium_handlers import get_premium_keyboard, handle_premium_callback
import json
from aiogram import F

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = "7046522560:AAHXlYcX5UUarUQfbWwQsAzMog0xkNP56XA"
ADMIN_ID = 729190790  # –í–∞—à Telegram ID
ADMIN_USERNAME = "ivantyaj"  # –í–∞—à username –≤ Telegram

bot = Bot(token=TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üßò‚Äç‚ôÇÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏–∏", web_app=WebAppInfo(url="https://your-meditation-app.com"))],
            [KeyboardButton(text="üéß –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏")],
            [KeyboardButton(text="üåü 21-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å")],
            [KeyboardButton(text="üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")],
            [KeyboardButton(text="üìä –ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")],
            [KeyboardButton(text="üìù –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
def get_tests_keyboard():
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text="üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"))
    keyboard.add(KeyboardButton(text="üìã –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"))
    keyboard.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    keyboard.adjust(1)
    return keyboard.as_markup(resize_keyboard=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤")],
            [KeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
            [KeyboardButton(text="‚≠ê –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton(text="üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def get_premium_management_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º")],
            [KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–º–∏—É–º")],
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    return keyboard

def get_test_question_keyboard(question_number: int, total_questions: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(
        text="‚ùå –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç",
        callback_data="cancel_test"
    ))
    keyboard.adjust(1)
    return keyboard.as_markup()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_test_states = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
premium_management_states = {}

async def start_bot():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    add_admin(ADMIN_ID, ADMIN_USERNAME)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp = Dispatcher()
    
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        conn = get_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,))
        user = cursor.fetchone()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "INSERT INTO users (telegram_id, username) VALUES (?, ?)",
                (message.from_user.id, message.from_user.username)
            )
            conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if is_admin(message.from_user.id):
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
                reply_markup=get_admin_keyboard()
            )
        else:
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è mindfulness –º–µ–¥–∏—Ç–∞—Ü–∏–π! üßò‚Äç‚ôÇÔ∏è\n\n"
                "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
                reply_markup=get_main_keyboard()
            )
        
        conn.close()

    @dp.message(Command("admin"))
    async def cmd_admin(message: types.Message):
        if is_admin(message.from_user.id):
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_admin_keyboard()
            )
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    @dp.message(lambda message: message.text == "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤")
    async def show_test_statistics(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        conn = get_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ—Å—Ç–∞–º
        cursor.execute("""
            SELECT 
                t.title,
                COUNT(DISTINCT r.user_id) as users_count,
                AVG(r.total_score) as avg_score,
                MIN(r.total_score) as min_score,
                MAX(r.total_score) as max_score
            FROM user_test_results r
            JOIN psychological_tests t ON r.test_id = t.id
            GROUP BY t.id
        """)
        test_stats = cursor.fetchall()
        
        if not test_stats:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤.")
            return
        
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º:\n\n"
        for title, users_count, avg_score, min_score, max_score in test_stats:
            response += f"üìù {title}\n"
            response += f"üë• –ü—Ä–æ—à–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            response += f"üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}\n"
            response += f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {min_score}\n"
            response += f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {max_score}\n\n"
        
        await message.answer(response)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        cursor.execute("""
            SELECT 
                u.username,
                t.title,
                r.total_score,
                r.completed_at
            FROM user_test_results r
            JOIN users u ON r.user_id = u.telegram_id
            JOIN psychological_tests t ON r.test_id = t.id
            ORDER BY r.completed_at DESC
            LIMIT 10
        """)
        recent_results = cursor.fetchall()
        
        if recent_results:
            response = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
            for username, title, score, completed_at in recent_results:
                response += f"üë§ {username}\n"
                response += f"üìù {title}\n"
                response += f"üìä –ë–∞–ª–ª—ã: {score}\n"
                response += f"üìÖ –î–∞—Ç–∞: {completed_at}\n\n"
            
            await message.answer(response)
        
        conn.close()

    @dp.message(lambda message: message.text == "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    async def show_user_statistics(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        conn = get_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("""
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN is_premium = 1 THEN 1 END) as premium_users,
                COUNT(DISTINCT r.user_id) as users_with_tests
            FROM users u
            LEFT JOIN user_test_results r ON u.telegram_id = r.user_id
        """)
        stats = cursor.fetchone()
        
        response = "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        response += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats[0]}\n"
        response += f"–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats[1]}\n"
        response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç—ã: {stats[2]}\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("""
            SELECT 
                u.username,
                COUNT(r.id) as tests_count,
                MAX(r.completed_at) as last_test_date
            FROM users u
            LEFT JOIN user_test_results r ON u.telegram_id = r.user_id
            GROUP BY u.telegram_id
            ORDER BY last_test_date DESC NULLS LAST
            LIMIT 10
        """)
        recent_users = cursor.fetchall()
        
        response += "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for username, tests_count, last_test_date in recent_users:
            response += f"üë§ {username}\n"
            response += f"üìä –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_count}\n"
            if last_test_date:
                response += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç: {last_test_date}\n\n"
            else:
                response += "üìÖ –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã\n\n"
        
        await message.answer(response)
        conn.close()

    @dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
    async def back_to_main_menu(message: types.Message):
        if is_admin(message.from_user.id):
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_admin_keyboard()
            )
        else:
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=get_main_keyboard()
            )

    @dp.message(lambda message: message.text == "üìù –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")
    async def show_tests_menu(message: types.Message):
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")],
                [KeyboardButton(text="üìã –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )

    @dp.message(lambda message: message.text == "‚≠ê –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    async def show_premium_management(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        await message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
            reply_markup=get_premium_management_keyboard()
        )

    @dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
    async def add_premium(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–µ–º–∏—É–º.\n"
            "Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @, –Ω–∞–ø—Ä–∏–º–µ—Ä: @username"
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        premium_management_states[message.from_user.id] = "waiting_premium_username"

    @dp.message(lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
    async def remove_premium(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–µ–º–∏—É–º.\n"
            "Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @, –Ω–∞–ø—Ä–∏–º–µ—Ä: @username"
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        premium_management_states[message.from_user.id] = "waiting_premium_remove_username"

    @dp.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º")
    async def show_premium_list(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        premium_users = get_premium_users()
        if not premium_users:
            await message.answer("–ù–µ—Ç –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
            
        response = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for username in premium_users:
            response += f"üë§ @{username[0]}\n"
        
        await message.answer(response)

    @dp.message(lambda message: message.from_user.id in premium_management_states and 
                premium_management_states[message.from_user.id] in ["waiting_premium_username", "waiting_premium_remove_username"])
    async def process_premium_action(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        try:
            username = message.text.strip()
            if not username.startswith('@'):
                await message.answer("Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @, –Ω–∞–ø—Ä–∏–º–µ—Ä: @username")
                return
                
            # –£–±–∏—Ä–∞–µ–º @ –∏–∑ –Ω–∞—á–∞–ª–∞ username
            username = username[1:]
            
            action = premium_management_states[message.from_user.id]
            
            if action == "waiting_premium_username":
                if add_premium_user(username):
                    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–µ–º–∏—É–º.")
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–µ–º–∏—É–º.")
            else:
                if remove_premium_user(username):
                    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–µ–º–∏—É–º.")
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–º–∏—É–º.")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del premium_management_states[message.from_user.id]
            
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @dp.message(lambda message: message.text == "üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
    async def show_available_tests(message: types.Message):
        conn = get_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT id, title, description, is_free FROM psychological_tests")
        tests = cursor.fetchall()
        
        if not tests:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
            return
        
        keyboard = InlineKeyboardBuilder()
        for test_id, title, description, is_free in tests:
            if is_free or is_premium_user(message.from_user.username):
                keyboard.add(types.InlineKeyboardButton(
                    text=title,
                    callback_data=f"start_test_{test_id}"
                ))
            else:
                keyboard.add(types.InlineKeyboardButton(
                    text=f"{title} üîí",
                    callback_data=f"premium_test_{test_id}"
                ))
        keyboard.adjust(1)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:",
            reply_markup=keyboard.as_markup()
        )
        conn.close()

    @dp.callback_query(lambda c: c.data.startswith("premium_test_"))
    async def handle_premium_test(callback: types.CallbackQuery):
        test_id = int(callback.data.split("_")[2])
        username = callback.from_user.username
        
        if not username:
            await callback.message.answer(
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç–Ω—ã–º —Ç–µ—Å—Ç–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram."
            )
            return
            
        if is_premium_user(username):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
            new_callback = types.CallbackQuery(
                id=callback.id,
                from_user=callback.from_user,
                message=callback.message,
                chat_instance=callback.chat_instance,
                data=f"start_test_{test_id}"
            )
            await start_test(new_callback)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–º–∏—É–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞
            message_text = (
                "üîí –≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                "–°—Ç–æ–∏–º–æ—Å—Ç—å Premium: 299 —Ä—É–±/–º–µ—Å—è—Ü\n\n"
                "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium:\n"
                "‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ç–µ—Å—Ç–∞–º\n"
                "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
                "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
                "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:\n"
                "1Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 299 —Ä—É–±. –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã:\n"
                "1234 5678 9012 3456\n\n"
                "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
                "@ivantyaj\n\n"
                "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –≤–∞–º –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø!"
            )
            await callback.message.answer(message_text)
            
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("start_test_"))
    async def start_test(callback: types.CallbackQuery):
        test_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"
        
        conn = get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user_id,))
            if not cursor.fetchone():
                cursor.execute("""
                    INSERT INTO users (telegram_id, username, is_premium)
                    VALUES (?, ?, ?)
                """, (user_id, username, 0))
                conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
            cursor.execute("""
                SELECT title, questions_count 
                FROM psychological_tests 
                WHERE id = ?
            """, (test_id,))
            test_info = cursor.fetchone()
            
            if not test_info:
                await callback.message.answer("–û—à–∏–±–∫–∞: —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            title, total_questions = test_info
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
            cursor.execute("""
                SELECT id, question_text 
                FROM test_questions 
                WHERE test_id = ? 
                ORDER BY question_number 
                LIMIT 1
            """, (test_id,))
            question = cursor.fetchone()
            
            if not question:
                await callback.message.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            cursor.execute("""
                SELECT id, answer_text 
                FROM test_answers 
                WHERE question_id = ? 
                ORDER BY score
            """, (question[0],))
            answers = cursor.fetchall()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚ùå –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç")]
                ],
                resize_keyboard=True
            )
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            inline_keyboard = InlineKeyboardBuilder()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            message_text = f"üìù –¢–µ—Å—Ç: {title}\n\n"
            message_text += f"–í–æ–ø—Ä–æ—Å 1 –∏–∑ {total_questions}:\n{question[1]}\n\n"
            message_text += "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n"
            
            for i, (answer_id, answer_text) in enumerate(answers, 1):
                message_text += f"{i}. {answer_text}\n"
                inline_keyboard.add(types.InlineKeyboardButton(
                    text=str(i),
                    callback_data=f"answer_{test_id}_{question[0]}_{answer_id}"
                ))
            
            inline_keyboard.adjust(4)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 4 –≤ —Ä—è–¥
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_test_states[user_id] = {
                "test_id": test_id,
                "current_question": 1,
                "total_questions": total_questions,
                "total_score": 0,
                "test_title": title
            }
            
            await callback.message.answer(
                message_text,
                reply_markup=keyboard
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:",
                reply_markup=inline_keyboard.as_markup()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞: {e}")
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            conn.close()

    @dp.message(lambda message: message.text == "‚ùå –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç")
    async def cancel_test(message: types.Message):
        user_id = message.from_user.id
        
        if user_id not in user_test_states:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è.")
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
        del user_test_states[user_id]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")],
                [KeyboardButton(text="üìã –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            "–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=keyboard
        )

    @dp.callback_query(lambda c: c.data.startswith("answer_"))
    async def process_answer(callback: types.CallbackQuery):
        _, test_id, question_id, answer_id = callback.data.split("_")
        test_id = int(test_id)
        question_id = int(question_id)
        answer_id = int(answer_id)
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"
        
        if user_id not in user_test_states:
            await callback.message.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        conn = get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user_id,))
            if not cursor.fetchone():
                cursor.execute("""
                    INSERT INTO users (telegram_id, username, is_premium)
                    VALUES (?, ?, ?)
                """, (user_id, username, 0))
                conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª –∑–∞ –æ—Ç–≤–µ—Ç
            cursor.execute("SELECT score FROM test_answers WHERE id = ?", (answer_id,))
            score = cursor.fetchone()[0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                INSERT INTO user_test_answers (user_id, test_id, question_id, answer_id, score)
                VALUES (?, ?, ?, ?, ?)
            """, (user_id, test_id, question_id, answer_id, score))
            conn.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
            user_test_states[user_id]["total_score"] += score
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            cursor.execute("""
                SELECT id, question_text 
                FROM test_questions 
                WHERE test_id = ? AND question_number > ? 
                ORDER BY question_number 
                LIMIT 1
            """, (test_id, user_test_states[user_id]["current_question"]))
            next_question = cursor.fetchone()
            
            if next_question:
                # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                cursor.execute("""
                    SELECT id, answer_text 
                    FROM test_answers 
                    WHERE question_id = ? 
                    ORDER BY score
                """, (next_question[0],))
                answers = cursor.fetchall()
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
                inline_keyboard = InlineKeyboardBuilder()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
                message_text = f"üìù –¢–µ—Å—Ç: {user_test_states[user_id]['test_title']}\n\n"
                message_text += f"–í–æ–ø—Ä–æ—Å {user_test_states[user_id]['current_question'] + 1} –∏–∑ {user_test_states[user_id]['total_questions']}:\n{next_question[1]}\n\n"
                message_text += "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n"
                
                for i, (answer_id, answer_text) in enumerate(answers, 1):
                    message_text += f"{i}. {answer_text}\n"
                    inline_keyboard.add(types.InlineKeyboardButton(
                        text=str(i),
                        callback_data=f"answer_{test_id}_{next_question[0]}_{answer_id}"
                    ))
                
                inline_keyboard.adjust(4)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 4 –≤ —Ä—è–¥
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                user_test_states[user_id]["current_question"] += 1
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
                await callback.message.answer(message_text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
                await callback.message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:",
                    reply_markup=inline_keyboard.as_markup()
                )
            else:
                # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
                total_score = user_test_states[user_id]["total_score"]
                test_title = user_test_states[user_id]["test_title"]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                cursor.execute("""
                    SELECT interpretation 
                    FROM test_interpretations 
                    WHERE test_id = ? AND ? BETWEEN min_score AND max_score
                """, (test_id, total_score))
                interpretation = cursor.fetchone()[0]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
                cursor.execute("""
                    INSERT INTO user_test_results (user_id, test_id, total_score, completed_at)
                    VALUES (?, ?, ?, CURRENT_TIMESTAMP)
                """, (user_id, test_id, total_score))
                conn.commit()
                
                # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
                del user_test_states[user_id]
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")],
                        [KeyboardButton(text="üìã –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")],
                        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
                
                await callback.message.answer(
                    f"üìù –¢–µ—Å—Ç: {test_title}\n\n"
                    f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                    f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score} –±–∞–ª–ª–æ–≤\n"
                    f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {interpretation}",
                    reply_markup=keyboard
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞.")
        finally:
            conn.close()

    @dp.message(lambda message: message.text == "üìã –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    async def show_my_results(message: types.Message):
        conn = get_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT 
                t.title,
                r.total_score,
                r.completed_at
            FROM user_test_results r
            JOIN psychological_tests t ON r.test_id = t.id
            WHERE r.user_id = ?
            ORDER BY r.completed_at DESC
        """, (message.from_user.id,))
        results = cursor.fetchall()
        
        if not results:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤.")
            return
        
        response = "üìã –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:\n\n"
        for title, score, completed_at in results:
            response += f"üìù {title}\n"
            response += f"üìä –ë–∞–ª–ª—ã: {score}\n"
            response += f"üìÖ –î–∞—Ç–∞: {completed_at}\n\n"
        
        await message.answer(response)
        conn.close()

    @dp.message(lambda message: message.text == "üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    async def show_detailed_results(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        conn = get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç—ã
            cursor.execute("""
                SELECT DISTINCT u.telegram_id, u.username
                FROM users u
                JOIN user_test_results r ON u.telegram_id = r.user_id
                ORDER BY u.username
            """)
            users = cursor.fetchall()
            
            if not users:
                await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç—ã.")
                return
                
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            keyboard = InlineKeyboardBuilder()
            for user_id, username in users:
                keyboard.add(types.InlineKeyboardButton(
                    text=f"@{username}",
                    callback_data=f"user_{user_id}"
                ))
            keyboard.adjust(1)
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
                reply_markup=keyboard.as_markup()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        finally:
            conn.close()

    @dp.callback_query(lambda c: c.data.startswith("user_"))
    async def show_user_tests(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        user_id = int(callback.data.split("_")[1])
        
        conn = get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT username FROM users WHERE telegram_id = ?", (user_id,))
            username = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT DISTINCT
                    t.id,
                    t.title,
                    r.completed_at,
                    r.id as result_id
                FROM user_test_results r
                JOIN psychological_tests t ON r.test_id = t.id
                WHERE r.user_id = ?
                ORDER BY r.completed_at DESC
            """, (user_id,))
            tests = cursor.fetchall()
            
            if not tests:
                await callback.message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤.")
                return
                
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ—Å—Ç–∞–º–∏
            keyboard = InlineKeyboardBuilder()
            for test_id, title, completed_at, result_id in tests:
                keyboard.add(types.InlineKeyboardButton(
                    text=f"{title} ({completed_at})",
                    callback_data=f"test_{user_id}_{test_id}_{result_id}"
                ))
            keyboard.adjust(1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            keyboard.add(types.InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                callback_data="back_to_users"
            ))
            
            await callback.message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤:",
                reply_markup=keyboard.as_markup()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤.")
        finally:
            conn.close()

    @dp.callback_query(lambda c: c.data == "back_to_users")
    async def back_to_users(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        conn = get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç—ã
            cursor.execute("""
                SELECT DISTINCT u.telegram_id, u.username
                FROM users u
                JOIN user_test_results r ON u.telegram_id = r.user_id
                ORDER BY u.username
            """)
            users = cursor.fetchall()
            
            if not users:
                await callback.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç—ã.")
                return
                
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            keyboard = InlineKeyboardBuilder()
            for user_id, username in users:
                keyboard.add(types.InlineKeyboardButton(
                    text=f"@{username}",
                    callback_data=f"user_{user_id}"
                ))
            keyboard.adjust(1)
            
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
                reply_markup=keyboard.as_markup()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        finally:
            conn.close()

    @dp.callback_query(lambda c: c.data.startswith("test_"))
    async def show_test_answers(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        parts = callback.data.split("_")
        if len(parts) != 4:
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
            
        user_id = int(parts[1])
        test_id = int(parts[2])
        result_id = int(parts[3])
        
        conn = get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–µ—Å—Ç–µ
            cursor.execute("SELECT username FROM users WHERE telegram_id = ?", (user_id,))
            user_result = cursor.fetchone()
            if not user_result:
                await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            username = user_result[0]
            
            cursor.execute("SELECT title FROM psychological_tests WHERE id = ?", (test_id,))
            test_result = cursor.fetchone()
            if not test_result:
                await callback.message.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            test_title = test_result[0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Ç–µ—Å—Ç–∞
            cursor.execute("""
                SELECT total_score, completed_at
                FROM user_test_results
                WHERE id = ?
            """, (result_id,))
            result = cursor.fetchone()
            if not result:
                await callback.message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            total_score, completed_at = result
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            cursor.execute("""
                SELECT 
                    q.question_text,
                    a.answer_text,
                    ua.score
                FROM user_test_answers ua
                JOIN test_questions q ON q.id = ua.question_id
                JOIN test_answers a ON a.id = ua.answer_id
                JOIN user_test_results r ON r.user_id = ua.user_id 
                    AND r.test_id = ua.test_id
                    AND r.completed_at = ?
                WHERE ua.user_id = ? 
                    AND ua.test_id = ?
                ORDER BY q.question_number
            """, (completed_at, user_id, test_id))
            answers = cursor.fetchall()
            
            if not answers:
                await callback.message.answer("–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            response = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ '{test_title}'\n\n"
            response += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            response += f"üìÖ –î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {completed_at}\n"
            response += f"üìà –û–±—â–∏–π –±–∞–ª–ª: {total_score}\n\n"
            response += "üìù –û—Ç–≤–µ—Ç—ã:\n\n"
            
            for question, answer, score in answers:
                response += f"‚ùì {question}\n"
                response += f"‚úÖ –û—Ç–≤–µ—Ç: {answer}\n"
                response += f"üìä –ë–∞–ª–ª—ã: {score}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º"
            keyboard = InlineKeyboardBuilder()
            keyboard.add(types.InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º",
                callback_data=f"user_{user_id}"
            ))
            
            await callback.message.answer(
                response,
                reply_markup=keyboard.as_markup()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.")
        finally:
            conn.close()

    @dp.message(Command("check_db"))
    async def check_database(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        conn = get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
            cursor.execute("SELECT * FROM user_test_results")
            test_results = cursor.fetchall()
            
            response = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:\n\n"
            if test_results:
                for result in test_results:
                    response += f"ID: {result[0]}\n"
                    response += f"User ID: {result[1]}\n"
                    response += f"Test ID: {result[2]}\n"
                    response += f"Score: {result[3]}\n"
                    response += f"Date: {result[4]}\n\n"
            else:
                response += "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT * FROM user_test_answers")
            test_answers = cursor.fetchall()
            
            response += "üìù –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            if test_answers:
                for answer in test_answers:
                    response += f"ID: {answer[0]}\n"
                    response += f"User ID: {answer[1]}\n"
                    response += f"Test ID: {answer[2]}\n"
                    response += f"Question ID: {answer[3]}\n"
                    response += f"Answer ID: {answer[4]}\n"
                    response += f"Score: {answer[5]}\n"
                    response += f"Date: {answer[6]}\n\n"
            else:
                response += "–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
            cursor.execute("""
                SELECT r.*, u.username, t.title 
                FROM user_test_results r
                JOIN users u ON r.user_id = u.telegram_id
                JOIN psychological_tests t ON r.test_id = t.id
            """)
            joined_results = cursor.fetchall()
            
            response += "üîó –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏:\n\n"
            if joined_results:
                for result in joined_results:
                    response += f"Result ID: {result[0]}\n"
                    response += f"User: @{result[6]}\n"
                    response += f"Test: {result[7]}\n"
                    response += f"Score: {result[3]}\n"
                    response += f"Date: {result[4]}\n\n"
            else:
                response += "–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            
            await message.answer(response)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        finally:
            conn.close()

    @dp.message(Command("check_tables"))
    async def check_tables(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        conn = get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
            cursor.execute("SELECT * FROM users WHERE telegram_id = 686534625")
            user = cursor.fetchone()
            
            response = "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
            if user:
                response += f"ID: {user[0]}\n"
                response += f"Telegram ID: {user[1]}\n"
                response += f"Username: {user[2]}\n"
                response += f"Premium: {user[3]}\n"
            else:
                response += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É psychological_tests
            cursor.execute("SELECT * FROM psychological_tests WHERE id = 3")
            test = cursor.fetchone()
            
            response += "\nüìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ:\n\n"
            if test:
                response += f"ID: {test[0]}\n"
                response += f"Title: {test[1]}\n"
                response += f"Description: {test[2]}\n"
                response += f"Questions count: {test[3]}\n"
            else:
                response += "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
            cursor.execute("SELECT * FROM test_questions WHERE test_id = 3")
            questions = cursor.fetchall()
            
            response += "\n‚ùì –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞:\n\n"
            if questions:
                for q in questions:
                    response += f"ID: {q[0]}\n"
                    response += f"Question: {q[2]}\n"
                    response += f"Number: {q[3]}\n\n"
            else:
                response += "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            await message.answer(response)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {str(e)}")
        finally:
            conn.close()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    @dp.message(F.web_app_data)
    async def handle_webapp_data(message: types.Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            data = json.loads(message.web_app_data.data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if 'action' in data:
                if data['action'] == 'meditation_completed':
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –º–µ–¥–∏—Ç–∞—Ü–∏—é
                    meditation_id = data.get('meditation_id')
                    duration = data.get('duration')
                    await message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—é.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω—É—Ç")
                
                elif data['action'] == 'favorite_added':
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –º–µ–¥–∏—Ç–∞—Ü–∏—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                    meditation_id = data.get('meditation_id')
                    await message.answer("‚ú® –ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
                
                elif data['action'] == 'premium_request':
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–º–∏—É–º
                    await message.answer(
                        "üåü Premium –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
                        "–°—Ç–æ–∏–º–æ—Å—Ç—å: 299 —Ä—É–±/–º–µ—Å—è—Ü\n\n"
                        "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
                        "‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–µ–¥–∏—Ç–∞—Ü–∏—è–º\n"
                        "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                        "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
                        "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
                        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:\n"
                        "1Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 299 —Ä—É–±. –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã:\n"
                        "1234 5678 9012 3456\n\n"
                        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
                        "@ivantyaj\n\n"
                        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –≤–∞–º –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø!"
                    )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(handle_premium_callback, F.data.startswith('premium_'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(start_bot()) 